/*
  Youâ€™re given the pointer to the head node of a doubly linked list. Reverse the 
  order of the nodes in the list. The head node might be NULL to indicate that the 
  list is empty. Change the next and prev pointers of all the nodes so that the direction 
  of the list is reversed. Return a reference to the head node of the reversed list.
*/

static DoublyLinkedListNode reverse(DoublyLinkedListNode head) {
        
        if (head != null) {
            
            DoublyLinkedListNode p = head;
            DoublyLinkedListNode curr = p.next;
            DoublyLinkedListNode pp = null;

            //reversing head node first
            p.next = null;
            p.prev = curr;
            
            while ( curr != null ) {
                pp = p;
                p = curr;
                curr = curr.next;
                p.prev = curr;
                p.next = pp;
                
            }
            
            head = p;
            
        }
        
        return head;
    
    }
